package com.example.starter.environment;

import org.apache.commons.logging.Log;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.env.EnvironmentPostProcessor;
import org.springframework.boot.logging.DeferredLogFactory;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.MapPropertySource;
import org.springframework.core.env.PropertySource;

import java.util.Map;


/**
 * Устанавливаем порядок выполнения. Более низкое значение - более раннее выполнение.
 * Можно использовать <pre>Ordered.HIGHEST_PRECEDENCE</pre> или конкретные числа
 */
@Order(Ordered.LOWEST_PRECEDENCE)
public class MyCustomEnvironmentPostProcessor implements EnvironmentPostProcessor {

    private static final String CUSTOM_PROPERTY_SOURCE_NAME = "myCustomProperties";

    // логгер, чей вывод отложен до инициализации системы логирования
    private final Log log;

    // Spring Boot сам создаст экземпляр, передав сюда DeferredLogFactory (отложенный логгер)
    public MyCustomEnvironmentPostProcessor(DeferredLogFactory logFactory) {
        this.log = logFactory.getLog(MyCustomEnvironmentPostProcessor.class);
    }

    @Override
    public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
        log.info("MyCustomEnvironmentPostProcessor is running!");

        Map<String, Object> customProperties = Map.of(
                "my.custom.property.generated", "This value was generated by EPP",
                "my.custom.app.name", application.getMainApplicationClass().getSimpleName() + "-customized");

        /**
         * Имитация загрузки из внешнего источника
         * <pre>
         * Map<String, Object> externalProps = loadFromExternalSource();
         * customProperties.putAll(externalProps);
         * </pre>
         *
         * Или с использованием {@code}:
         * {@code
         * Map<String, Object> externalProps = loadFromExternalSource();
         * customProperties.putAll(externalProps);
         * }
         */

        PropertySource<?> customPropertySource = new MapPropertySource(CUSTOM_PROPERTY_SOURCE_NAME, customProperties);

        /**
         * Добавляем наш PropertySource.
         * Можно указать, куда его добавить:
         * <pre>
         * environment.getPropertySources().addFirst(customPropertySource); // Самый высокий приоритет
         * environment.getPropertySources().addLast(customPropertySource);  // Самый низкий приоритет (обычно используется)
         * environment.getPropertySources().addBefore("systemProperties", customPropertySource);
         * environment.getPropertySources().addAfter("systemEnvironment", customPropertySource);
         * </pre>
         *
         * Добавим после системных переменных окружения, но до application.properties (если они еще не загружены)
         * или просто в конец, если порядок не так критичен и мы хотим, чтобы application.properties могли переопределить.
         * Для максимального влияния, но с возможностью переопределения application.properties,
         * лучше добавить до стандартных источников файлов конфигурации, но после командной строки, системных и переменных окружения.
         * Однако, проще всего - {@code addLast} и знать, что они могут быть переопределены.
         * Или {@code addFirst} для максимального приоритета.
         *
         * Давайте добавим с низким приоритетом, чтобы их можно было переопределить в application.properties
         */

        environment.getPropertySources().addLast(customPropertySource);

        log.info("Added custom PropertySource:" + CUSTOM_PROPERTY_SOURCE_NAME);
        log.info("my.custom.property.generated = " + environment.getProperty("my.custom.property.generated"));
    }
}